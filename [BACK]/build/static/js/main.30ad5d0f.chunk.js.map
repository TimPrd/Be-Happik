{"version":3,"sources":["logo.svg","components/Buttons/AddItems.js","components/AddUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","styled","button","_templateObject","AddItem","_ref","label","handleClick","react_default","a","createElement","type","onClick","Container","div","AddUser_templateObject","Input","input","_templateObject2","InputError","_templateObject3","SubmitBtn","_templateObject4","AddUserSchema","Yup","shape","email","of","min","max","required","team","AddUser","formik_esm","validationSchema","onSubmit","values","console","log","handleChange","handleBlur","errors","touched","name","render","arrayHelpers","length","map","index","key","onChange","onBlur","value","concat","className","AddItems","remove","insert","push","component","defaultValue","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","send","socket","socketIOClient","state","endpoint","emit","rand","Math","floor","random","on","col","alert","fetch","method","headers","Content-Type","Origin","Access-Control-Request-Method","Access-Control-Allow-Origin","Access-Control-Request-Headers","body","JSON","stringify","teams","then","response","json","data","catch","err","components_AddUser","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30ad5d0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport styled from 'styled-components'\n\nconst Button = styled.button`\n  width: 30px;\n  height: 30px;\n  background-color: transparent;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1em;\n  margin: 5px;\n  padding: 0;\n  border: 2px solid #000;\n  border-radius: 3px;\n  box-sizing: border-box;\n`;\n\n\nconst AddItem = ({ label, handleClick }) => (\n  <Button type=\"button\" onClick={handleClick}>\n    {label}\n  </Button>\n);\n\nexport default AddItem;","import React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\n\nimport AddItemBtn from './Buttons/AddItems';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  width: 250px;\n  background-color: transparent;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid #000;\n  border-radius: 3px;\n  box-sizing: border-box;\n\n  &.withError {\n    border: 2px solid red;\n    color: red;\n  }\n`;\n\nconst InputError = styled.div`\n  width: 250px;\n  background-color: transparent;\n  font-size: 1em;\n  color: red;\n`;\n\nconst SubmitBtn = styled.button`\n  width: 250px;\n  background-color: transparent;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid #000;\n  border-radius: 3px;\n`;\n\nconst AddUserSchema = Yup.object().shape({\n  email: Yup.array()\n    .of(\n      Yup.string()\n      .min(5, 'Your email is too Short!')\n      .max(50, 'Your email is too Long!')\n      .required('Email is required'),\n    ),\n  team: Yup.string()\n    .required('Select a team'),\n});\n\nconst AddUser = () => (\n  <Container>\n    <Formik\n      validationSchema={AddUserSchema}\n\n      onSubmit={values => {\n        console.log('Values: ', values);\n      }}\n    >\n      {({\n        handleChange,\n        handleBlur,\n        values,\n        errors,\n        touched\n      }) => (\n        <Form>\n          <Container>\n            <FieldArray\n              name=\"email\"\n              render={arrayHelpers => (\n                <div>\n                  {values.email && values.email.length > 0 ? (\n                    values.email.map((email, index) => (\n                      <div key={index}>\n                        <Input\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.name}\n                          type=\"email\"\n                          name={`email.${index}`}\n                          className={ errors.email && touched.email && errors.email[index] ? 'withError' : ''}\n                        />\n\n                        {errors.email && touched.email ? (\n                          <InputError>\n                            { touched.email.length > 0 ? errors.email[index] : '' }\n                          </InputError>\n                        ) : null}\n\n                        <AddItemBtn label=\"X\" handleClick={() => arrayHelpers.remove(index)} />\n\n                        <AddItemBtn label=\"+\" handleClick={() => arrayHelpers.insert(index + 1, '')} />\n\n                      </div>\n                    ))\n                  ) : (\n                    <SubmitBtn type=\"button\" onClick={() => arrayHelpers.push('')}>\n                      Add a user\n                    </SubmitBtn>\n                  )}\n                </div>\n              )}\n            />\n          </Container>\n\n          <br/>\n\n          <Container>\n            <Field component=\"select\" name=\"team\">\n              <option value=\"\" defaultValue>Select the team</option>\n              <option value=\"team_1\">Team 1</option>\n              <option value=\"team_2\">Team 2</option>\n              <option value=\"team_3\">Team 3</option>\n              <option value=\"team_4\">Team 4</option>\n              <option value=\"team_5\">Team 5</option>\n              <option value=\"team_6\">Team 6</option>\n            </Field>\n\n            {errors.team ? (\n              <div>{errors.team}</div>\n            ) : null}\n          </Container>\n\n          <SubmitBtn type=\"submit\">\n            Submit\n          </SubmitBtn>\n        </Form>\n      )}\n    </Formik>\n  </Container>\n);\n\nexport default AddUser;","import React, {Component} from 'react';\nimport socketIOClient from 'socket.io-client'\n\nimport AddUser from './components/AddUser'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            endpoint: \"http://localhost:4000\" // this is where we are connecting to with sockets\n            ,rand : Math.floor(Math.random() * 2) //todo : will be the user id\n        }\n    }\n\n    componentDidMount() {\n        const {endpoint} = this.state;\n        const socket = socketIOClient(endpoint);\n        console.log(this.state.rand)\n        socket.emit('setUserId', this.state.rand);\n        socket.on('hi!', (col) => {\n            alert(col);\n        });\n        fetch('http://localhost:4000/survey/validate', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                'Origin': 'http://localhost',\n                'Access-Control-Request-Method': 'POST',\n                'Access-Control-Allow-Origin':'*',\n                'Access-Control-Request-Headers': 'content-type'\n            },\n            body: JSON.stringify({teams:\"JKRow\"})\n        })\n            .then((response) => {\n                console.log(response.json());\n            })\n            .then((data) => {\n                console.log(data);\n                return data;\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    // method for emitting a socket.io event\n    send = () => {\n        const socket = socketIOClient(this.state.endpoint)\n        console.log(socket);\n        socket.emit('connection');\n    };\n\n    render() {\n        const socket = socketIOClient(this.state.endpoint);\n        socket.on('hi!', (col) => {\n            alert(col);\n        })\n        return (\n            <div className=\"App\">\n                <AddUser/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}